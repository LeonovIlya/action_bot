import logging
import aiofiles
from aiopath import AsyncPath

from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext

from loader import db
from utils import keyboards, queries
from utils.states import UserState


CLUSTERS = ('0', '2')
SHOPS = ('–í–µ—Ä–Ω—ã–π', '–î–∏–∫—Å–∏', '–õ–µ–Ω—Ç–∞', '–ú–∞–≥–Ω–∏—Ç', '–ü–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫', '–ü—è—Ç–µ—Ä–æ—á–∫–∞')
MAGNITS = ('–ú–∞–≥–Ω–∏—Ç –ì–ú', '–ú–∞–≥–Ω–∏—Ç –ú–ö', '–ú–∞–≥–Ω–∏—Ç –ú–ú')


async def tools_menu(message: types.Message):
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é:',
                         reply_markup=keyboards.tools_menu_merch)
    await UserState.tools_menu_mr.set()


# –≤—ã–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Ç–µ—Ä
async def planogram_choice(message: types.Message):
    keyboard = await keyboards.get_inline_buttons(CLUSTERS)
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Ç–µ—Ä:',
                         reply_markup=keyboard)
    await UserState.plan_cluster.set()


# –≤—ã–±–∏—Ä–∞–µ–º —Ç–æ—Ä–≥–æ–≤—É—é —Å–µ—Ç—å
async def cluster_choice(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.update_data(cluster=callback.data)
    keyboard = await keyboards.get_inline_buttons(SHOPS)
    await callback.bot.edit_message_text(
        chat_id=callback.from_user.id,
        message_id=callback.message.message_id,
        text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é —Å–µ—Ç—å:',
        reply_markup=keyboard)
    await UserState.plan_shop.set()


# –≤—ã–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –º–∞–≥–∞–∑–∏–Ω–∞
async def shop_choice(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    if callback.data == '–ú–∞–≥–Ω–∏—Ç':
        keyboard = await keyboards.get_inline_buttons(MAGNITS)
        await callback.bot.edit_message_text(
            chat_id=callback.from_user.id,
            message_id=callback.message.message_id,
            text='–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ú–∞–≥–Ω–∏—Ç–∞:',
            reply_markup=keyboard)
    else:
        data = await db.get_stuff_list(queries.name_query,
                                       shop_name=callback.data)
        keyboard = await keyboards.get_inline_buttons(data)
        await callback.bot.edit_message_text(
            chat_id=callback.from_user.id,
            message_id=callback.message.message_id,
            text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω–æ–≥—Ä–∞–º–º—É:',
            reply_markup=keyboard)
        await state.update_data(shop_name=callback.data)
        await UserState.plan_name.set()


# —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–¥, –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
async def name_choice(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.delete()
    name = callback.data
    data = await state.get_data()
    try:
        await callback.message.answer(text='–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞...')
        data = await db.get_one(queries.file_query, name=name,
                                shop_name=data['shop_name'],
                                cluster=data['cluster'])
        file = AsyncPath(data)
        if await file.is_file():
            await callback.message.answer(text='–û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...')
            async with aiofiles.open(data, 'rb') as file:
                await callback.message.answer_document(file,
                                                       reply_markup=keyboards.back)
                await state.finish()
        else:
            await callback.message.answer(text='–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!',
                                          reply_markup=keyboards.back)
            await state.finish()
    except Exception as error:
        await callback.message.answer(
            text=f'–ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞!\nError: {error}',
            reply_markup=keyboards.back)
        await state.finish()
        logging.info('%error', error)


async def get_dmp(message: types.Message, state: FSMContext):
    await message.answer(text='–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
                         reply_markup=keyboards.back)
    await state.finish()


async def get_picture_success(message: types.Message, state: FSMContext):
    await message.answer(text='–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
                         reply_markup=keyboards.back)
    await state.finish()


# –∫–æ–º–ø–∞–Ω—É–µ–º –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
def register_handlers_planogram(dp: Dispatcher):
    dp.register_message_handler(tools_menu,
                                text='–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ãüõ†')
    dp.register_message_handler(planogram_choice,
                                text='–ü–ª–∞–Ω–æ–≥—Ä–∞–º–º—ãüßÆ',
                                state=UserState.tools_menu_mr)
    dp.register_message_handler(get_dmp,
                                text='–î–ú–üüì¶',
                                state=UserState.tools_menu_mr)
    dp.register_message_handler(get_picture_success,
                                text='–ö–∞—Ä—Ç–∏–Ω–∞ –£—Å–ø–µ—Ö–∞üéâ',
                                state=UserState.tools_menu_mr)
    dp.register_callback_query_handler(cluster_choice,
                                       state=UserState.plan_cluster)
    dp.register_callback_query_handler(shop_choice, state=UserState.plan_shop)
    dp.register_callback_query_handler(name_choice, state=UserState.plan_name)
