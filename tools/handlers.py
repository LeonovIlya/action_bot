import aiofiles
import logging
import time
from aiopath import AsyncPath

from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext

from loader import db
from utils import keyboards, queries
from utils.states import UserState

CLUSTERS = ('0', '2', '3')
SHOPS = ('–í–µ—Ä–Ω—ã–π', '–î–∏–∫—Å–∏', '–õ–µ–Ω—Ç–∞', '–ú–∞–≥–Ω–∏—Ç', '–ü–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫', '–ü—è—Ç–µ—Ä–æ—á–∫–∞')
MAGNITS = ('–ú–∞–≥–Ω–∏—Ç –ì–ú', '–ú–∞–≥–Ω–∏—Ç –ú–ö', '–ú–∞–≥–Ω–∏—Ç –ú–ú')


async def tools_menu(message: types.Message):
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é:',
                         reply_markup=keyboards.tools_menu_merch)
    await UserState.tools_menu.set()


# –≤—ã–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Ç–µ—Ä
async def planogram_choice(message: types.Message):
    keyboard = await keyboards.get_inline_buttons(CLUSTERS)
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Ç–µ—Ä:',
                         reply_markup=keyboard)
    await UserState.tools_plan_cluster.set()


# –≤—ã–±–∏—Ä–∞–µ–º —Ç–æ—Ä–≥–æ–≤—É—é —Å–µ—Ç—å
async def cluster_choice(callback: types.CallbackQuery, state: FSMContext):
    await callback.bot.answer_callback_query(callback.id)
    await state.update_data(cluster=callback.data)
    keyboard = await keyboards.get_inline_buttons(SHOPS)
    await callback.bot.edit_message_text(
        chat_id=callback.from_user.id,
        message_id=callback.message.message_id,
        text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é —Å–µ—Ç—å:',
        reply_markup=keyboard)
    await UserState.tools_plan_shop.set()


# –≤—ã–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –º–∞–≥–∞–∑–∏–Ω–∞
async def shop_choice(callback: types.CallbackQuery, state: FSMContext):
    await callback.bot.answer_callback_query(callback.id)
    if callback.data == '–ú–∞–≥–Ω–∏—Ç':
        keyboard = await keyboards.get_inline_buttons(MAGNITS)
        await callback.bot.edit_message_text(
            chat_id=callback.from_user.id,
            message_id=callback.message.message_id,
            text='–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ú–∞–≥–Ω–∏—Ç–∞:',
            reply_markup=keyboard)
    else:
        try:
            data = await db.get_all(queries.NAME_QUERY,
                                    shop_name=str(callback.data))
            data = [i[0] for i in data]
            keyboard = await keyboards.get_inline_buttons(data)
            await callback.bot.edit_message_text(
                chat_id=callback.from_user.id,
                message_id=callback.message.message_id,
                text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω–æ–≥—Ä–∞–º–º—É:',
                reply_markup=keyboard)
            await state.update_data(shop_name=callback.data)
            await UserState.tools_plan_name.set()
        except Exception as error:
            await message.answer(text='–ö–∞–∂–µ—Ç—Å—è —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n'
                                      '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
            logging.info(
                f'DB error: {error}, user: {int(message.from_user.id)}')


# —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–¥, –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
async def name_choice(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.delete()
    try:
        name = callback.data
        data = await state.get_data()
        file_link = await db.get_one(
            await queries.get_value(
                value='file_link',
                table='planograms'),
            name=name,
            shop_name=data['shop_name'],
            cluster=data['cluster'])
        file = AsyncPath(str(file_link[0]))
        if await file.is_file():
            await callback.answer(text='–û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...',
                                  show_alert=False)
            time.sleep(1)
            async with aiofiles.open(str(file_link[0]), 'rb') as file:
                await callback.message.answer_document(file,
                                                       reply_markup=keyboards.back)
                await UserState.tools_menu.set()
        else:
            await callback.message.answer(text='–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!',
                                          reply_markup=keyboards.back)
            await UserState.tools_menu.set()
    except Exception as error:
        await callback.message.answer(
            text=f'–ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞!\nError: {error}',
            reply_markup=keyboards.back)
        await UserState.tools_menu.set()
        logging.info('%error', error)


async def get_dmp(message: types.Message):
    await message.answer(text='–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
                         reply_markup=keyboards.back)


async def promo_action(message: types.Message):
    keyboard = await keyboards.get_inline_buttons(SHOPS)
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é —Å–µ—Ç—å:',
                         reply_markup=keyboard)
    await UserState.tools_promo.set()


async def get_promo_action(callback: types.CallbackQuery):
    await callback.bot.answer_callback_query(callback.id)
    if callback.data == '–ú–∞–≥–Ω–∏—Ç':
        keyboard = await keyboards.get_inline_buttons(MAGNITS)
        await callback.bot.edit_message_text(
            chat_id=callback.from_user.id,
            message_id=callback.message.message_id,
            text='–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ú–∞–≥–Ω–∏—Ç–∞:',
            reply_markup=keyboard)
    else:
        try:
            await callback.message.delete()
            file_link = await db.get_one(
                await queries.get_value(
                    value='file_link',
                    table='promo'),
                shop_name=str(callback.data))
            file = AsyncPath(str(file_link[0]))
            if await file.is_file():
                await callback.answer(text='–û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...',
                                      show_alert=False)
                time.sleep(1)
                async with aiofiles.open(str(file_link[0]), 'rb') as file:
                    await callback.message.answer_document(file,
                                                           reply_markup=keyboards.back)
                    await UserState.tools_menu.set()
            else:
                await callback.message.answer(text='–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!',
                                              reply_markup=keyboards.back)
                await UserState.tools_menu.set()
        except Exception as error:
            await callback.message.answer(
                text=f'–ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞!\nError: {error}',
                reply_markup=keyboards.back)
            await UserState.tools_menu.set()
            logging.info('%error', error)


async def get_picture_success(message: types.Message):
    await message.answer(text='–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
                         reply_markup=keyboards.back)


# –∫–æ–º–ø–∞–Ω—É–µ–º –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
def register_handlers_tools(dp: Dispatcher):
    dp.register_message_handler(tools_menu,
                                text='–ù–∞–∑–∞–¥‚Ü©',
                                state=(UserState.tools_menu,
                                       UserState.tools_promo,
                                       UserState.tools_plan_cluster,
                                       UserState.tools_plan_shop,
                                       UserState.tools_plan_name))
    dp.register_message_handler(tools_menu,
                                text='–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ãüõ†',
                                state=[UserState.auth_mr,
                                       UserState.auth_kas,
                                       UserState.auth_citimanager])
    dp.register_message_handler(planogram_choice,
                                text='–ü–ª–∞–Ω–æ–≥—Ä–∞–º–º—ãüßÆ',
                                state=UserState.tools_menu)
    dp.register_message_handler(get_dmp,
                                text='–î–ú–üüì¶',
                                state=UserState.tools_menu)
    dp.register_message_handler(promo_action,
                                text='–ü—Ä–æ–º–æüéÅ',
                                state=UserState.tools_menu)
    dp.register_message_handler(get_picture_success,
                                text='–ö–∞—Ä—Ç–∏–Ω–∞ –£—Å–ø–µ—Ö–∞üéâ',
                                state=UserState.tools_menu)
    dp.register_callback_query_handler(cluster_choice,
                                       state=UserState.tools_plan_cluster)
    dp.register_callback_query_handler(shop_choice,
                                       state=UserState.tools_plan_shop)
    dp.register_callback_query_handler(name_choice,
                                       state=UserState.tools_plan_name)
    dp.register_callback_query_handler(get_promo_action,
                                       state=UserState.tools_promo)
