import logging
from pathlib import Path

from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext

from loader import db
from utils import keyboards, queries
from utils.states import UserState


# –≤—ã–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Ç–µ—Ä
async def planogram_choice(message: types.Message):
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Ç–µ—Ä:',
                         reply_markup=keyboards.CLUSTERS_ALL)
    await UserState.plan_cluster.set()


# –≤—ã–±–∏—Ä–∞–µ–º —Ç–æ—Ä–≥–æ–≤—É—é —Å–µ—Ç—å
async def cluster_choice(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.update_data(cluster=callback.data)
    data = await db.get_stuff_list(queries.shop_list)
    await callback.bot.edit_message_text(
        chat_id=callback.from_user.id,
        message_id=callback.message.message_id,
        text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é —Å–µ—Ç—å:',
        reply_markup=keyboards.get_list_inline(data))
    await UserState.plan_shop.set()


# –≤—ã–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –º–∞–≥–∞–∑–∏–Ω–∞
async def shop_choice(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    if callback.data == '–ú–∞–≥–Ω–∏—Ç':
        data = await db.get_stuff_list(queries.magnit_list,
                                       chain_name=callback.data)
        await callback.bot.edit_message_text(
            chat_id=callback.from_user.id,
            message_id=callback.message.message_id,
            text='–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ú–∞–≥–Ω–∏—Ç–∞:',
            reply_markup=keyboards.get_list_inline(
                data))

    elif callback.data == '–ú–∞–≥–Ω–∏—Ç –ú–ú':
        data = await db.get_stuff_list(queries.name_query,
                                       shop_name=callback.data)
        await callback.bot.edit_message_text(
            chat_id=callback.from_user.id,
            message_id=callback.message.message_id,
            text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω–æ–≥—Ä–∞–º–º—É:',
            reply_markup=keyboards.get_list_inline(
                data))
        await state.update_data(shop_name=callback.data)
        await UserState.plan_name.set()

    elif callback.data == '–ú–∞–≥–Ω–∏—Ç –ì–ú':
        data = await db.get_stuff_list(queries.name_query,
                                       shop_name=callback.data)
        await callback.bot.edit_message_text(
            chat_id=callback.from_user.id,
            message_id=callback.message.message_id, text='–í—ã–±–µ—Ä–∏—Ç–µ '
                                                         '–ø–ª–∞–Ω–æ–≥—Ä–∞–º–º—É:',
            reply_markup=keyboards.get_list_inline(
                data))
        await state.update_data(shop_name=callback.data)
        await UserState.plan_name.set()

    elif callback.data == '–ú–∞–≥–Ω–∏—Ç –ú–ö':
        data = await db.get_stuff_list(queries.name_query,
                                       shop_name=callback.data)
        await callback.bot.edit_message_text(
            chat_id=callback.from_user.id,
            message_id=callback.message.message_id, text='–í—ã–±–µ—Ä–∏—Ç–µ '
                                                         '–ø–ª–∞–Ω–æ–≥—Ä–∞–º–º—É:',
            reply_markup=keyboards.get_list_inline(
                data))
        await state.update_data(shop_name=callback.data)
        await UserState.plan_name.set()
    else:
        data = await db.get_stuff_list(queries.name_query,
                                       shop_name=callback.data)
        await callback.bot.edit_message_text(
            chat_id=callback.from_user.id,
            message_id=callback.message.message_id, text='–í—ã–±–µ—Ä–∏—Ç–µ '
                                                         '–ø–ª–∞–Ω–æ–≥—Ä–∞–º–º—É:',
            reply_markup=keyboards.get_list_inline(
                data))
        await state.update_data(shop_name=callback.data)
        await UserState.plan_name.set()


# —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–¥, –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
async def name_choice(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.delete()
    name = callback.data
    data = await state.get_data()
    try:
        await callback.message.answer(text='–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞...')
        data = await db.get_stuff(queries.file_query, name=name,
                                  shop_name=data['shop_name'],
                                  cluster=data['cluster'])
        file = Path(data)
        if file.is_file():
            await callback.message.answer(text='–û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...')
            with open(data, 'rb') as file:
                await callback.message.answer_document(file,
                                                       reply_markup=keyboards.back)
                await state.finish()
        else:
            await callback.message.answer(text='–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!',
                                          reply_markup=keyboards.back)
            await state.finish()
    except Exception as error:
        await callback.message.answer(
            text='–ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞!\nError: %s' % error,
            reply_markup=keyboards.back)
        await state.finish()
        logging.info(f'{error}')


# –∫–æ–º–ø–∞–Ω—É–µ–º –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
def register_handlers_planogram(dp: Dispatcher):
    dp.register_message_handler(planogram_choice, text='–ü–ª–∞–Ω–æ–≥—Ä–∞–º–º—ãüßÆ')
    dp.register_callback_query_handler(cluster_choice,
                                       state=UserState.plan_cluster)
    dp.register_callback_query_handler(shop_choice, state=UserState.plan_shop)
    dp.register_callback_query_handler(name_choice, state=UserState.plan_name)
