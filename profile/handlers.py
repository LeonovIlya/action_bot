from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext

from loader import db
from utils import keyboards, queries
from utils.states import UserState

POSITION = {'mr': '–ú–µ—Ä—á–µ–Ω–¥–∞–π–∑–µ—Ä', 'kas': '–°—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä', 'cm': '–°–∏—Ç–∏–º–µ–Ω–µ–¥–∂–µ—Ä'}


async def profile_menu(message: types.Message):
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é:",
                         reply_markup=keyboards.profile_menu)
    await UserState.profile_menu.set()


async def my_profile(message: types.Message):
    try:
        data = await db.get_one(queries.PROFILE,
                                tg_id=int(message.from_user.id))
        match data[3]:
            case 'mr':
                await message.answer(text=''
                                          f'<b>–§–ò–û:</b> {data[0]}\n'
                                          f'<b>–í–∞—à KAS:</b> {data[6]}\n'
                                          f'<b>–í–∞—à CM:</b> {data[7]}\n'
                                          f'<b>–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è:</b> {data[1]}\n'
                                          f'<b>–†–µ–≥–∏–æ–Ω:</b> {data[2]}\n'
                                          f'<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {POSITION[data[3]]}\n '
                                          f'<b>–£—Ä–æ–≤–µ–Ω—å:</b> {data[4]}\n'
                                          f'<b>–ë–∞–ª–ª—ã:</b> {data[5]}\n',
                                     reply_markup=keyboards.back)
            case 'kas':
                await message.answer(text=''
                                          f'<b>–§–ò–û:</b> {data[0]}\n'
                                          f'<b>–í–∞—à CM:</b> {data[7]}\n'
                                          f'<b>–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è:</b> {data[1]}\n'
                                          f'<b>–†–µ–≥–∏–æ–Ω:</b> {data[2]}\n'
                                          f'<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {POSITION[data[3]]}\n'
                                          f'<b>–£—Ä–æ–≤–µ–Ω—å:</b> {data[4]}\n'
                                          f'<b>–ë–∞–ª–ª—ã:</b> {data[5]}\n',
                                     reply_markup=keyboards.back)
            case 'cm':
                await message.answer(text=''
                                          f'<b>–§–ò–û:</b> {data[0]}\n'
                                          f'<b>–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è:</b> {data[1]}\n'
                                          f'<b>–†–µ–≥–∏–æ–Ω:</b> {data[2]}\n'
                                          f'<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {POSITION[data[3]]}\n'
                                          f'<b>–£—Ä–æ–≤–µ–Ω—å:</b> {data[4]}\n'
                                          f'<b>–ë–∞–ª–ª—ã:</b> {data[5]}\n',
                                     reply_markup=keyboards.back)
    except Exception as error:
        await message.answer(text='‚ùó –ö–∞–∂–µ—Ç—Å—è —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n'
                                  '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
        logging.info(
            f'Error: {error}, user: {int(message.from_user.id)}')


async def career(message: types.Message):
    await message.answer(text='–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
                         reply_markup=keyboards.back)


async def hr_documents(message: types.Message):
    await message.answer(text='–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
                         reply_markup=keyboards.back)


async def poll(message: types.Message):
    pass
    await message.answer(text='')


def register_handlers_profile(dp: Dispatcher):
    dp.register_message_handler(profile_menu,
                                text='–ù–∞–∑–∞–¥‚Ü©',
                                state=UserState.profile_menu)

    dp.register_message_handler(profile_menu,
                                text='–ö–∞–±–∏–Ω–µ—ÇüóÑ',
                                state=(UserState.auth_mr,
                                       UserState.auth_kas,
                                       UserState.auth_cm))

    dp.register_message_handler(my_profile,
                                text='–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—åüóÇ',
                                state=UserState.profile_menu)
    dp.register_message_handler(career,
                                text='–ö–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Çüîù',
                                state=UserState.profile_menu)
    dp.register_message_handler(hr_documents,
                                text='–ö–∞–¥—Ä–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ãüóÉ',
                                state=UserState.profile_menu)
    dp.register_message_handler(poll,
                                text='–û–ø—Ä–æ—Åüí¨',
                                state=UserState.profile_menu)
