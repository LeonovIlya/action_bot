import aiofiles
import datetime
import locale
import logging
from aiopath import AsyncPath
from aiofiles import os as aios

from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext

from loader import db
from utils import keyboards, queries
from utils.states import UserState

locale.setlocale(locale.LC_ALL, 'ru_RU.UTF-8')


async def practice_menu_mr(message: types.Message):
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é:',
                         reply_markup=keyboards.practice_menu_merch)
    await UserState.practice_menu_mr.set()


async def practice_menu_citimanager(message: types.Message):
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é:',
                         reply_markup=keyboards.practice_menu_citimanager)
    await UserState.practice_menu_citimanager.set()


async def get_current_practice(message: types.Message):
    current_practice = await db.get_list(queries.BP_NAME,
                                         is_active=True)
    for i in current_practice:
        datetime_start = datetime.datetime.strptime(str(i[2]),
                                                    '%Y-%m-%d %H:%M:%S')
        datetime_stop = datetime.datetime.strptime(str(i[3]),
                                                   '%Y-%m-%d %H:%M:%S')
        start = datetime_start.strftime('%d %B %Y')
        stop = datetime_stop.strftime('%d %B %Y')
        file = AsyncPath(str(i[4]))
        if await file.is_file():
            async with aiofiles.open(str(i[4]), 'rb') as file:
                await message.answer_photo(photo=file,
                                           caption=f'<b>'
                                                   f'{str(i[0])}</b>\n\n'
                                                   f'{str(i[1])}\n\n'
                                                   f'<b>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:</b>\n'
                                                   f'{start}\n\n'
                                                   f'<b>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</b>\n'
                                                   f'{stop}',
                                           reply_markup=keyboards.back)
        else:
            await message.answer(text='–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!',
                                 reply_markup=keyboards.back)


async def take_part(message: types.Message):
    await message.answer(text='–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
                         reply_markup=keyboards.back)


async def make_suggest(message: types.Message):
    await message.answer(text='–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
                         reply_markup=keyboards.back)


async def add_new_practice_add_name(message: types.Message):
    await message.answer(text='–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏:',
                         reply_markup=keyboards.back)
    await UserState.practice_add.set()


async def add_new_practice_add_desc(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer(text='–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏:',
                         reply_markup=keyboards.back)
    await UserState.practice_add_desc.set()


async def add_new_practice_add_start(message: types.Message, state: FSMContext):
    await state.update_data(desc=message.text)
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "20-01-2003":',
                         reply_markup=keyboards.back)
    await UserState.practice_add_start.set()


async def add_new_practice_add_stop(message: types.Message, state: FSMContext):
    try:
        date_start = datetime.datetime.strptime(message.text, '%d-%m-%Y')
        if date_start < datetime.datetime.now():
            await message.answer(text='–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–¥–Ω–µ–µ '
                                      '—Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã!\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –µ—â–µ —Ä–∞–∑!')
        else:
            await state.update_data(date_start=date_start)
            await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ '
                                      '"20-01-2003":',
                                 reply_markup=keyboards.back)
            await UserState.practice_add_stop.set()
    except ValueError:
        await message.answer(text='–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')


async def add_new_practice_add_picture(message: types.Message,
                                       state: FSMContext):
    try:
        date_stop = datetime.datetime.strptime(message.text, '%d-%m-%Y')
        if date_stop < datetime.datetime.now():
            await message.answer(text='–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–¥–Ω–µ–µ '
                                      '—Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã!\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –µ—â–µ —Ä–∞–∑!')
        else:
            data = await state.get_data()
            if date_stop < data['date_start']:
                await message.answer(text='–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å '
                                          '–ø–æ–∑–¥–Ω–µ–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞!\n–í–≤–µ–¥–∏—Ç–µ '
                                          '–¥–∞—Ç—É –µ—â–µ —Ä–∞–∑!')
            else:
                await state.update_data(date_stop=date_stop)
                await message.answer(text='–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –Ω–æ–≤–æ–π '
                                          '–ø—Ä–∞–∫—Ç–∏–∫–∏:',
                                     reply_markup=keyboards.back)
                await UserState.practice_add_picture.set()
    except ValueError:
        await message.answer(text='–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')


async def add_new_practice(message: types.Message, state: FSMContext):
    max_id = await db.get_one(queries.MAX_ID)
    if max_id[0] is None:
        max_id = ('0',)
    data = await state.get_data()
    user_id = await db.get_one(await queries.get_value('id'),
                               tg_id=message.from_user.id)
    destination = f'./files/best_practice/{int(max_id[0]) + 1}/1.jpg'
    await message.photo[-1].download(destination=destination,
                                     make_dirs=True)
    await db.post(queries.INSERT_PRACTICE,
                  name=data['name'],
                  desc=data['desc'],
                  user_added=user_id[0],
                  datetime_added=datetime.datetime.now(),
                  datetime_start=data['date_start'],
                  datetime_stop=data['date_stop'],
                  is_active=True,
                  pics=destination)
    await message.answer(text='–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ',
                         reply_markup=keyboards.back)


async def manage_practice(message: types.Message):
    await message.answer(text='–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
                         reply_markup=keyboards.back)


def register_handlers_best_practice(dp: Dispatcher):
    dp.register_message_handler(practice_menu_mr,
                                text='–ù–∞–∑–∞–¥‚Ü©',
                                state=UserState.practice_menu_mr)
    dp.register_message_handler(practice_menu_mr,
                                text='–ù–∞–∑–∞–¥‚Ü©',
                                state=UserState.practice_menu_citimanager)
    dp.register_message_handler(practice_menu_mr,
                                text='–ü—Ä–∞–∫—Ç–∏–∫–∏üó£',
                                state=UserState.auth_mr)
    dp.register_message_handler(practice_menu_citimanager,
                                text='–ü—Ä–∞–∫—Ç–∏–∫–∏üó£',
                                state=UserState.auth_citimanager)
    dp.register_message_handler(get_current_practice,
                                text='–¢–µ–∫—É—â–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏üéØ',
                                state=UserState.practice_menu_mr)
    dp.register_message_handler(take_part,
                                text='–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—åüì∏',
                                state=UserState.practice_menu_mr)
    dp.register_message_handler(make_suggest,
                                text='–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—èüìù',
                                state=UserState.practice_menu_mr)
    dp.register_message_handler(add_new_practice_add_name,
                                text='–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é‚ûï',
                                state=UserState.practice_menu_citimanager)
    dp.register_message_handler(add_new_practice_add_desc,
                                state=UserState.practice_add)
    dp.register_message_handler(add_new_practice_add_start,
                                state=UserState.practice_add_desc)
    dp.register_message_handler(add_new_practice_add_stop,
                                state=UserState.practice_add_start)
    dp.register_message_handler(add_new_practice_add_picture,
                                state=UserState.practice_add_stop)
    dp.register_message_handler(add_new_practice,
                                content_types=['photo'],
                                state=UserState.practice_add_picture)
    dp.register_message_handler(manage_practice,
                                text='–£–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—É—â–∏–º–∏üîÄ',
                                state=UserState.practice_menu_citimanager)
