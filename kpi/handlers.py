import logging
import re
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext

from loader import db
from utils import keyboards, queries
from utils.states import UserState

r_str = r'(^\d{6},)|(\w+\s–æ–±–ª,)|(\w+-\w+\s—Ä-–Ω,)|(\w+\s—Ä-–Ω,)|(\w+\s—Ä–Ω,' \
        r')|(\s‚Ññ\s)|(\s–≥,)'


async def kpi_menu(message: types.Message):
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é:',
                         reply_markup=keyboards.kpi_menu)
    await UserState.kpi_menu.set()


async def kpi_mr(message: types.Message):
    try:
        position = await db.get_one(
            await queries.get_value(
                value='position',
                table='users'
            ),
            tg_id=int(message.from_user.id)
        )
        if position[0] == 'mr':
            query = await db.get_one(queries.KP_MR_QUERY,
                                     tg_id=int(message.from_user.id))
            await message.answer(text=f'<b>–í–∞—à KPI (–ø–ª–∞–Ω | —Ñ–∞–∫—Ç | '
                                      f'–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ):</b>\n'
                                      f'<b><u>PSS:</u></b> {query[0]:.2%} |'
                                      f' {query[1]:.2%}'
                                      f' | {query[2]:.2%}\n'
                                      f'<b><u>OSA:</u></b> {query[3]:.2%} |'
                                      f' {query[4]:.2%} |'
                                      f' {query[5]:.2%}\n'
                                      f'<b><u>TT:</u></b> {query[6]} | {query[7]} |'
                                      f' {query[8]:.2%}\n'
                                      f'<b><u>Visits:</u></b> {query[9]} |'
                                      f' {query[10]} |'
                                      f' {query[11]:.2%}',
                                 reply_markup=keyboards.back)
        else:
            await message.answer(text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è '
                                      '–ø–æ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è '
                                      '<u>–º–µ—Ä—á–µ–Ω–¥–∞–π–∑–µ—Ä–æ–≤</u>.',
                                 reply_markup=keyboards.back)
    except Exception as error:
        await message.answer(text='‚ùó –ö–∞–∂–µ—Ç—Å—è —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n'
                                  '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
        logging.info(f'Error: {error}, user: {int(message.from_user.id)}')


async def kpi_tt(message: types.Message):
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ 7-–∏ –∑–Ω–∞—á–Ω—ã–π –Ω–æ–º–µ—Ä –¢–¢:',
                         reply_markup=keyboards.back)
    await UserState.kpi_search_tt.set()


async def kpi_search_tt(message: types.Message):
    tt_num = re.sub(r'\s', '', str(message.text))
    if re.match(r'\d{7}', tt_num) and len(tt_num) == 7:
        try:
            query = await db.get_one(queries.KPI_TT_QUERY,
                                     tt_num=tt_num)
            if query:
                address = re.sub(r_str, '', query[0])
                await message.answer(
                    text=f'<b>TT ‚Ññ {tt_num}:</b>\n'
                         f'<b>–ê–¥—Ä–µ—Å:</b> {address}\n'
                         f'<b>MR:</b> {query[1]}\n'
                         f'<b>KAS:</b> {query[2]}\n\n'
                         f'<b>      –ø–ª–∞–Ω | —Ñ–∞–∫—Ç | –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ</b>\n'
                         f'<b><u>PSS:</u></b> {query[3]:.2%} |'
                         f' {query[4]:.2%}'
                         f' | {query[5]:.2%}\n'
                         f'<b><u>OSA:</u></b> {query[6]:.2%} |'
                         f' {query[7]:.2%} |'
                         f' {query[8]:.2%}\n'
                         f'<b><u>TT:</u></b> {query[9]} | {query[10]} |'
                         f' {query[11]:.2%}',
                    reply_markup=keyboards.back)
            else:
                await message.answer(text='‚ùó –¢–¢ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!\n'
                                          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!',
                                     reply_markup=keyboards.back)
        except Exception as error:
            await message.answer(text='‚ùó –ö–∞–∂–µ—Ç—Å—è —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n'
                                      '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
            logging.info(
                f'Error: {error}, user: {int(message.from_user.id)}')

    else:
        await message.answer(text='‚ùó –ù–æ–º–µ—Ä –¢–¢ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É –≤–≤–æ–¥–∞!\n'
                                  '–í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑!',
                             reply_markup=keyboards.back)


def register_handlers_kpi(dp: Dispatcher):
    dp.register_message_handler(kpi_menu,
                                text='–ù–∞–∑–∞–¥‚Ü©',
                                state=(UserState.kpi_menu,
                                       UserState.kpi_search_tt))
    dp.register_message_handler(kpi_menu,
                                text='KPIüìà',
                                state=(UserState.auth_mr,
                                       UserState.auth_kas,
                                       UserState.auth_cm))
    dp.register_message_handler(kpi_mr,
                                text='–ú–æ–π KPIüìà',
                                state=UserState.kpi_menu)
    dp.register_message_handler(kpi_tt,
                                text='KPI TTüè¨',
                                state=UserState.kpi_menu)
    dp.register_message_handler(kpi_search_tt,
                                state=UserState.kpi_search_tt)
